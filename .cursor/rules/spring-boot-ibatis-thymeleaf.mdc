---
description: 
globs: *.js,src/**/*.java,*.html
alwaysApply: false
---
# Rules for Spring Boot + MyBatis + Thymeleaf

This document provides a concise set of rules and conventions for building applications using this stack.

## 1. Project Setup & Dependencies

- **Rule 1.1: Core Dependencies**: Your `pom.xml` **must** include `spring-boot-starter-web`, `spring-boot-starter-thymeleaf`, and `mybatis-spring-boot-starter`.
- **Rule 1.2: Database Driver**: You **must** include a JDBC driver dependency for your target database (e.g., `h2`, `mysql-connector-java`).
- **Rule 1.3: Connection Pooling**: It is **highly recommended** to use a robust connection pool like HikariCP. Spring Boot defaults to it if it's on the classpath.

## 2. Configuration (`application.properties`)

- **Rule 2.1: Datasource**: You **must** configure the `spring.datasource.url`, `username`, and `password` properties.
- **Rule 2.2: MyBatis Mappers**: You **must** specify the location of your mapper files using `mybatis.mapper-locations`. A standard location is `classpath:mapper/*.xml`.
- **Rule 2.3: Type Aliases**: You **must** define the base package for your model/entity classes using `mybatis.type-aliases-package` to allow for shorter names in mapper files.
- **Rule 2.4: H2 Console**: For development with H2, **always** enable the H2 console via `spring.h2.console.enabled=true` for easy database inspection.

## 3. Data Layer (MyBatis)

- **Rule 3.1: Mapper Interfaces**: Every entity **must** have a corresponding Mapper interface annotated with `@Mapper`.
- **Rule 3.2: SQL in Annotations vs. XML**: 
    - For **simple** CRUD operations, using annotations (`@Select`, `@Insert`, etc.) directly in the Mapper interface is acceptable.
    - For **complex** SQL with dynamic logic, you **must** use XML mapper files to keep Java code clean.
- **Rule 3.3: Namespace**: The namespace in an XML mapper **must** match the fully qualified name of its corresponding Mapper interface.
- **Rule 3.4: Entity Naming**: Entity class fields **must** match the column names from the database or be mapped using a `<resultMap>`.

## 4. Service Layer

- **Rule 4.1: Business Logic**: All business logic **must** reside in `@Service` classes. Controllers should not contain business logic.
- **Rule 4.2: Transaction Management**: Any service method that performs multiple database writes **must** be annotated with `@Transactional` to ensure data consistency.
- **Rule 4.3: Separation of Concerns**: The service layer **must** act as an intermediary between the controller and the mapper/repository. Controllers call services, services call mappers.

## 5. Controller Layer

- **Rule 5.1: Controller Type**: 
    - Use `@Controller` for traditional web applications that return view names.
    - Use `@RestController` for APIs that return data (e.g., JSON) to be consumed by a frontend framework or JavaScript.
- **Rule 5.2: API Endpoints**: For RESTful services consumed by JavaScript, endpoints **must** be defined under a common base path (e.g., `/api`).
- **Rule 5.3: Data Transfer**: Controllers **must not** directly expose database entities if the API structure differs from the database schema. Use Data Transfer Objects (DTOs) instead.

## 6. Presentation Layer (Thymeleaf)

- **Rule 6.1: Server-Side Data**: Use `th:*` attributes to display data passed from the model. All dynamic content **must** be handled by Thymeleaf expressions.
- **Rule 6.2: Client-Side Interaction**: For dynamic UI updates without a full page reload (e.g., modals, partial updates), use JavaScript's `fetch` API to call your REST endpoints.
- **Rule 6.3: URL Expressions**: All URLs, especially those with dynamic parameters, **must** be generated using Thymeleaf's link syntax `@{...}` to ensure they are correctly context-aware.
- **Rule 6.4: JavaScript in Thymeleaf**: When passing server-side data to JavaScript functions (e.g., in an `onclick` handler), you **must** use Thymeleaf's inlining feature (`[[${...}]]`) or concatenate strings carefully to avoid syntax errors.

## 7. Database

- **Rule 7.1: Schema Initialization**: A `schema.sql` file **must** be placed in `src/main/resources` to create the database schema when using an embedded database like H2.
- **Rule 7.2: Data Initialization**: A `data.sql` file can be used to populate the database with initial data for development and testing.